name: test
on:
  # run tests on push to branch
  workflow_dispatch: {}
  push:
    branches:
      - 'feature/smb-test-setup'

  # run tests for all pull requests
  pull_request:

env:
  latest_go: "1.19.x"
  GO111MODULE: on

jobs:
  test:
    strategy:
      matrix:
        # list of jobs to run:
        include:
          - job_name: Windows
            go: 1.19.x
            os: windows-latest

          # - job_name: macOS
          #   go: 1.19.x
          #   os: macOS-latest
          #   test_fuse: false

          # - job_name: Linux
          #   go: 1.19.x
          #   os: ubuntu-latest
          #   test_cloud_backends: true
          #   test_fuse: true
          #   check_changelog: true

          # - job_name: Linux (race)
          #   go: 1.19.x
          #   os: ubuntu-latest
          #   test_fuse: true
          #   test_opts: "-race"

          # - job_name: Linux
          #   go: 1.18.x
          #   os: ubuntu-latest
          #   test_fuse: true

    name: ${{ matrix.job_name }} Go ${{ matrix.go }}
    runs-on: ${{ matrix.os }}

    env:
      GOPROXY: https://proxy.golang.org

    steps:
      - name: Set up Go ${{ matrix.go }}
        env:
              RESTIC_TEST_SMB_USERNAME: ${{ secrets.RESTIC_TEST_SMB_USERNAME }}
              RESTIC_TEST_SMB_PASSWORD: ${{ secrets.RESTIC_TEST_SMB_PASSWORD }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}

      - name: Get programs (Linux/macOS)
        run: |
          echo "build Go tools"
          go install github.com/restic/rest-server/cmd/rest-server@latest

          echo "install minio server"
          mkdir -p $HOME/bin
          if [ "$RUNNER_OS" == "macOS" ]; then
            wget --no-verbose -O $HOME/bin/minio https://dl.minio.io/server/minio/release/darwin-amd64/minio
          else
            wget --no-verbose -O $HOME/bin/minio https://dl.minio.io/server/minio/release/linux-amd64/minio
          fi
          chmod 755 $HOME/bin/minio

          echo "install rclone"
          if [ "$RUNNER_OS" == "macOS" ]; then
            wget --no-verbose -O rclone.zip https://downloads.rclone.org/rclone-current-osx-amd64.zip
          else
            wget --no-verbose -O rclone.zip https://downloads.rclone.org/rclone-current-linux-amd64.zip
          fi
          unzip rclone.zip
          cp rclone*/rclone $HOME/bin
          chmod 755 $HOME/bin/rclone
          rm -rf rclone*

          echo "install samba"
          if [ "$RUNNER_OS" == "macOS" ]; then
            NONINTERACTIVE=1 brew install samba
          else
            sudo apt-get update
            sudo apt-get install samba -y          
          fi
          
          user="$RESTIC_TEST_SMB_USERNAME"
          pass="$RESTIC_TEST_SMB_PASSWORD"

          echo "Allow Samba in firewall"
          sudo ufw allow 'Samba'

          echo "modifying samba config"
          echo '' | sudo tee -a /etc/samba/smb.conf
          echo '    interfaces = 127.0.0.0/8 eth0' | sudo tee -a /etc/samba/smb.conf
          echo '    bind interfaces only = yes' | sudo tee -a /etc/samba/smb.conf
          echo '' | sudo tee -a /etc/samba/smb.conf
          echo "[$user]" | sudo tee -a /etc/samba/smb.conf
          echo '    comment = Samba on Ubuntu' | sudo tee -a /etc/samba/smb.conf
          echo "    path = /samba/$user" | sudo tee -a /etc/samba/smb.conf
          echo '    browseable = yes' | sudo tee -a /etc/samba/smb.conf
          echo '    read only = no' | sudo tee -a /etc/samba/smb.conf
          echo '    force create mode = 0660' | sudo tee -a /etc/samba/smb.conf
          echo '    force directory mode = 2770' | sudo tee -a /etc/samba/smb.conf
          echo "    valid users = $user" | sudo tee -a /etc/samba/smb.conf
          
          echo "restart services"
          sudo systemctl restart smbd
          sudo systemctl restart nmbd

          echo "create samba share directory"
          sudo mkdir /samba

          echo "change sambashare group"
          sudo chgrp sambashare /samba

          echo "add samba user"
          sudo id -u "$user" &>/dev/null || sudo useradd -M -d "/samba/$user" -s /usr/sbin/nologin -G sambashare "$user"

          echo "create samba share user directory"
          sudo mkdir "/samba/$user"

          echo "change samba share user directory ownership"
          sudo chown "$user":sambashare "/samba/$user"

          echo "modify permissions on samba share user directory"
          sudo chmod 2770 "/samba/$user"

          echo "change smb password"
          (echo "$pass"; echo "$pass") | sudo smbpasswd -a "$user"

          echo "enable samba user"
          sudo smbpasswd -e "$user"

          echo "restart services"
          sudo systemctl restart smbd
          sudo systemctl restart nmbd
         
          # add $HOME/bin to path ($GOBIN was already added to the path by setup-go@v3)
          echo $HOME/bin >> $GITHUB_PATH
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'

      - name: Get programs (Windows)
        env:
            RESTIC_TEST_SMB_USERNAME: ${{ secrets.RESTIC_TEST_SMB_USERNAME }}
            RESTIC_TEST_SMB_PASSWORD: ${{ secrets.RESTIC_TEST_SMB_PASSWORD }}
        shell: powershell
        run: |
          $ProgressPreference = 'SilentlyContinue'

          echo "build Go tools"
          go install github.com/restic/rest-server/...

          echo "install minio server"
          mkdir $Env:USERPROFILE/bin
          Invoke-WebRequest https://dl.minio.io/server/minio/release/windows-amd64/minio.exe -OutFile $Env:USERPROFILE/bin/minio.exe

          echo "install rclone"
          Invoke-WebRequest https://downloads.rclone.org/rclone-current-windows-amd64.zip -OutFile rclone.zip

          unzip rclone.zip
          copy rclone*/rclone.exe $Env:USERPROFILE/bin

          # add $USERPROFILE/bin to path ($GOBIN was already added to the path by setup-go@v3)
          echo $Env:USERPROFILE\bin >> $Env:GITHUB_PATH

          echo "install tar"
          cd $env:USERPROFILE
          mkdir tar
          cd tar

          # install exactly these versions of tar and the libraries, other combinations might not work!

          Invoke-WebRequest https://github.com/restic/test-assets/raw/master/tar-1.13-1-bin.zip -OutFile tar.zip
          unzip tar.zip
          Invoke-WebRequest https://github.com/restic/test-assets/raw/master/libintl-0.11.5-2-bin.zip -OutFile libintl.zip
          unzip libintl.zip
          Invoke-WebRequest https://github.com/restic/test-assets/raw/master/libiconv-1.8-1-bin.zip -OutFile libiconv.zip
          unzip libiconv.zip

          # Create new smbshare
          $user="$env:RESTIC_TEST_SMB_USERNAME"
          $pass="$env:RESTIC_TEST_SMB_PASSWORD"
          $SecurePassword = $pass | ConvertTo-SecureString -AsPlainText -Force	

          echo "Create user"
          New-LocalUser $user -Password $SecurePassword -FullName "SMB User" -Description "Account used for smb access."

          $path="$Env:USERPROFILE\$user"	
          mkdir $path

          echo "Create share"
          New-SmbShare -Name $user -Path $path -EncryptData $True

          echo "Grant access to share"
          Grant-SmbShareAccess -Name $user -AccountName $user -AccessRight Full -Force

          # add $USERPROFILE/tar/bin to path
          echo $Env:USERPROFILE\tar\bin >> $Env:GITHUB_PATH
        if: matrix.os == 'windows-latest'

      - name: Check out code
        uses: actions/checkout@v3

      - name: Build with build.go
        run: |
          go run build.go

      - name: Run local Tests
        env:
          RESTIC_TEST_FUSE: ${{ matrix.test_fuse }}
        run: |
          go test -cover ${{matrix.test_opts}} ./...

      - name: Test cloud backends
        env:
          RESTIC_TEST_S3_KEY: ${{ secrets.RESTIC_TEST_S3_KEY }}
          RESTIC_TEST_S3_SECRET: ${{ secrets.RESTIC_TEST_S3_SECRET }}
          RESTIC_TEST_S3_REPOSITORY: ${{ secrets.RESTIC_TEST_S3_REPOSITORY }}
          RESTIC_TEST_SMB_USERNAME: ${{ secrets.RESTIC_TEST_SMB_USERNAME }}
          RESTIC_TEST_SMB_PASSWORD: ${{ secrets.RESTIC_TEST_SMB_PASSWORD }}
          RESTIC_TEST_AZURE_ACCOUNT_NAME: ${{ secrets.RESTIC_TEST_AZURE_ACCOUNT_NAME }}
          RESTIC_TEST_AZURE_ACCOUNT_KEY: ${{ secrets.RESTIC_TEST_AZURE_ACCOUNT_KEY }}
          RESTIC_TEST_AZURE_REPOSITORY: ${{ secrets.RESTIC_TEST_AZURE_REPOSITORY }}
          RESTIC_TEST_B2_ACCOUNT_ID: ${{ secrets.RESTIC_TEST_B2_ACCOUNT_ID }}
          RESTIC_TEST_B2_ACCOUNT_KEY: ${{ secrets.RESTIC_TEST_B2_ACCOUNT_KEY }}
          RESTIC_TEST_B2_REPOSITORY: ${{ secrets.RESTIC_TEST_B2_REPOSITORY }}
          RESTIC_TEST_GS_REPOSITORY: ${{ secrets.RESTIC_TEST_GS_REPOSITORY }}
          RESTIC_TEST_GS_PROJECT_ID: ${{ secrets.RESTIC_TEST_GS_PROJECT_ID }}
          GOOGLE_PROJECT_ID: ${{ secrets.RESTIC_TEST_GS_PROJECT_ID }}
          RESTIC_TEST_GS_APPLICATION_CREDENTIALS_B64: ${{ secrets.RESTIC_TEST_GS_APPLICATION_CREDENTIALS_B64 }}
          RESTIC_TEST_OS_AUTH_URL: ${{ secrets.RESTIC_TEST_OS_AUTH_URL }}
          RESTIC_TEST_OS_TENANT_NAME: ${{ secrets.RESTIC_TEST_OS_TENANT_NAME }}
          RESTIC_TEST_OS_USERNAME: ${{ secrets.RESTIC_TEST_OS_USERNAME }}
          RESTIC_TEST_OS_PASSWORD: ${{ secrets.RESTIC_TEST_OS_PASSWORD }}
          RESTIC_TEST_OS_REGION_NAME: ${{ secrets.RESTIC_TEST_OS_REGION_NAME }}
          RESTIC_TEST_SWIFT: ${{ secrets.RESTIC_TEST_SWIFT }}
          # fail if any of the following tests cannot be run
          RESTIC_TEST_DISALLOW_SKIP: "restic/backend/rest.TestBackendREST,\
            restic/backend/sftp.TestBackendSFTP,\
            restic/backend/s3.TestBackendMinio,\
            restic/backend/rclone.TestBackendRclone,\
            restic/backend/s3.TestBackendS3,\
            restic/backend/swift.TestBackendSwift,\
            restic/backend/b2.TestBackendB2,\
            restic/backend/gs.TestBackendGS,\
            restic/backend/azure.TestBackendAzure"
        run: |
          # prepare credentials for Google Cloud Storage tests in a temp file
          export GOOGLE_APPLICATION_CREDENTIALS=$(mktemp --tmpdir restic-gcs-auth-XXXXXXX)
          echo $RESTIC_TEST_GS_APPLICATION_CREDENTIALS_B64 | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
          go test -cover -parallel 4 ./internal/backend/...

        # only run cloud backend tests for pull requests from and pushes to our
        # own repo, otherwise the secrets are not available
        # Skip for Dependabot pull requests as these are run without secrets
        # https://docs.github.com/en/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions#responding-to-events
        if: (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && (github.actor != 'dependabot[bot]') && matrix.test_cloud_backends

      - name: Check changelog files with calens
        run: |
          echo "install calens"
          go install github.com/restic/calens@latest

          echo "check changelog files"
          calens
        if: matrix.check_changelog
